#include "main.h"

bool save_game(int slot) {
    return true;
}

bool load_game(int slot) {
    return true;
}

/*
============================================================
Chart Definitions
============================================================
    Charts contain sectors which contain dockables which
    contain the actual maps

    Chart data uses the following values
        0: Nothing
        1: Station
        2: Ice field
        3: Nebula
        4: Planetary System
*/

int num_charts = 4; // 1 area, 4 charts each
int chart_data[400] =
   {1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 5, 0, 5, 0, 3, 0, 0, 0, 0,
    0, 1, 0, 3, 3, 0, 0, 0, 0, 0,
    0, 0, 5, 0, 3, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 4, 0, 0,
    2, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 2, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 5, 0, 0, 0,
    0, 0, 4, 0, 0, 0, 0, 0, 0, 0,

    0, 0, 0, 0, 0, 0, 0, 3, 3, 4,
    0, 0, 0, 1, 0, 0, 0, 0, 3, 1,
    0, 0, 2, 0, 0, 5, 0, 3, 3, 0,
    0, 1, 2, 0, 0, 0, 3, 3, 4, 0,
    0, 2, 0, 0, 0, 3, 3, 0, 0, 0,
    0, 0, 0, 0, 4, 3, 0, 0, 0, 0,
    0, 0, 3, 3, 3, 3, 3, 3, 2, 0,
    0, 0, 3, 3, 0, 0, 0, 0, 5, 0,
    0, 3, 4, 5, 0, 0, 2, 0, 2, 0,
    4, 0, 0, 0, 0, 0, 0, 0, 2, 1,

    0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
    0, 5, 0, 0, 0, 2, 2, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 5, 0, 0,
    1, 0, 0, 0, 1, 2, 0, 0, 0, 0,
    0, 0, 0, 0, 2, 2, 2, 0, 0, 0,
    0, 2, 0, 0, 0, 0, 2, 3, 0, 3,
    0, 2, 2, 0, 0, 0, 0, 3, 3, 0,
    3, 3, 2, 0, 0, 0, 0, 0, 3, 3,
    4, 3, 5, 0, 0, 0, 0, 0, 3, 3,

    0, 2, 2, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 5, 0, 0,
    0, 0, 0, 0, 1, 0, 2, 0, 0, 0,
    0, 0, 0, 3, 3, 3, 0, 0, 3, 0,
    0, 0, 0, 5, 3, 4, 0, 3, 0, 0,
    0, 0, 2, 3, 3, 3, 3, 3, 0, 0,
    0, 0, 2, 2, 0, 0, 0, 5, 0, 0,
    0, 0, 0, 2, 0, 0, 0, 2, 0, 0,
    0, 0, 5, 0, 2, 0, 2, 2, 0, 0,
    0, 0, 0, 0, 0, 2, 0, 0, 0, 1};

chart_object_t chart_objects[40] = {
    {0, 0, 0, "Abandoned C. R.", 3, 4},
    {0, 1, 2, "Abandoned C. R.", 3, 0},
    {0, 7, 5, "Gau-4 System", 1, 3},
    {0, 6, 0, "Tin mining base", 1, 3},
    {0, 2, 9, "Gau-13 System", 1, 3},
    {0, 3, 4, "Abandoned C. R.", 1, 3},
    {0, 9, 6, "Tr. Post 143-k", 1, 3},
    {0, 8, 7, "Abandoned R. S.", 1, 3},
    {0, 4, 2, "Horse Nebula", 1, 3},
    {0, 5, 1, "Camel Nebula", 1, 3},

    {1, 3, 1, "Enemy Base 14-g", 2, 10},
    {1, 7, 0, "Adla Seng Neb.", 1, 9},
    {1, 9, 1, "Tr. Post 27-f", 1, 12},
    {1, 8, 3, "Keng-2 System", 1, 9},
    {1, 9, 0, "Keng-7 System", 1, 9},
    {1, 9, 9, "Frontier St. 13", 1, 13},
    {1, 0, 9, "Ebla-3 System", 1, 9},
    {1, 2, 8, "Ebla-17 System", 1, 9},
    {1, 1, 4, "Apollo Iron", 2, 7 },
    {1, 4, 5, "Jenja System", 1, 9},

    {2, 1, 0, "F. Inc. Mn.", 2, 14},
    {2, 0, 4, "Enemy Base", 1, 17},
    {2, 0, 9, "Hepler 2 Sys.", 1, 16},
    {2, 4, 4, "Enemy Base", 1, 17},
    {2, 7, 7, "Ice Nebula", 1, 16},
    {2, 9, 9, "Ked Nebula", 1, 16},
    {2, 8, 8, "Ged Nebula", 1, 16},
    {2, 6, 2, "F. Inc. Mn.", 1, 14},
    {2, 5, 2, "Abandoned C. R.", 2, 0},
    {2, 9, 6, "Old Nebula", 1, 16},

    {3, 1, 1, "Enemy Base 7-m", 1, 22},
    {3, 1, 0, "Ice Field", 1, 22},
    {3, 5, 4, "Kentak-2 Sys.", 1, 23},
    {3, 2, 5, "J. Inc Lead Mn.", 1, 23},
    {3, 2, 0, "Ice Field", 1, 23},
    {3, 9, 9, "Comm Station 17", 1, 24},
    {3, 0, 9, "Ice Field", 1, 23},
    {3, 4, 2, "Comm Station 16", 1, 24},
    {3, 3, 3, "Jelge Nebula", 1, 23},
    {3, 4, 5, "Home", 4, 18}};

/*
============================================================
Sector Definitions
============================================================
    Here is where all the dockable and non dockable space
    objects are found. This is an implementation of below:
        struct sector_object_t {
            int x; // if negative then this is the number of instances
            int y; // if negative one then random, if negative two then random with respawn (offscreen)
            std::string label;
            int type;
            int dock_address; // if negative then non-dockable
        };
*/
sector_object_t sector_objects[26] = {
    {30, 30, "Abandoned C. R.", 0, 0},
    {31, -2, "Asteroids", 1, -1},
    {23, -1, "Debris", 3, -1},

    {-20, -2, "Asteroids", 1, -1},

    {30, 30, "Abandoned C. R.", 0, 1},
    {-10, -2, "Asteroids", 1, -1},
    {-5, -1, "Debris", 3, -1},

    {-20, 30, "Asteroids", 1, -1},
    {-20, 30, "Asteroids", 3, -1},

    {-10, -2, "Asteroids", 1, -1},

    {-20, -2, "Asteroids", 1, -1},
    {-5, -1, "Enemy", 2, 2}, // FIX THIS SO THAT EACH ENEMY IS DIFFERENT SHIP!

    {30, 30, "Tr. Post 27-f", 0, 3},

    {30, 30, "Frontier St. 13", 0, 4},

    {30, 30, "F. Inc. Mn.", 1, 5},
    {20, 20, "F. Inc. Mn.", 3, 6},

    {-20, -2, "Asteroids", 1, -1},

    {30, 30, "Enemy", 2, 5},

    {30, 30, "Home", 0, 8},
    {20, 30, "Repair St.", 0, 9},
    {20, 20, "Refuel St.", 0, 10},
    {30, 20, "Armory St.", 0, 11},

    {30, 30, "Enemy", 2, 5},

    {30, 30, "Asteroids", 1, -1},

    {30, 30, "Comm Station", 0, 7},

    {30, 30, "Comm Station", 0, 8}};

/*
============================================================
Map Definitions
============================================================
    contains all the tile definitions in one giant array.

    additionally contains a list of chests, a list of
    portals, and a list of enemies.

    when tiles are negative they are decoded by using their
    unsigned value to find the correct id of the object
    which belongs there. this can be a chest, a portal, or an
    entity. on entity updates, the entity edits the map where
    it was and where it will be.
*/
int map_addresses[12] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int map_start_x[12] = {15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15};
int map_start_y[12] = {9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
int map_start_w[12] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
int map_start_h[12] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32};

int map_data[1025] = {6, 12, 12, 12, 12, 12, 6, 12, 6, 12, 12, 12, 6, 12, 12, 12, 12, 6, 6, 12, 12, 6, 12, 6, 12, 6, 12, 6, 12, 6, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 12, 12, 12, 12, 12, 12, 6, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 12, 12, 12, 6, 6, 12, 12, 12, 12, 12,
12, 12, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 12, 12, 12, 12, 12, 12, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 6, 6, 12, 12, 12, 12, 12, 12, 12, 6, 12, 12, 6, 12, 12, 12, 12, 6, 6, 12, 6, 6, 12, 12, 6, 6, 12, 12, 12, 12,
6, 12, 12, 12, 12, 12, 12, 12, 6, 12, 12, 6, 6, 0, 6, 6, 6, 12, 6, 6, 6, 0, 6, 0, 0, 0, 6, 12, 6, 12, 12, 6,
6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 6, 6, 12, 12, 12,
12, 12, 12, 6, 12, 12, 12, 12, 6, 12, 12, 12, 0, 0, 6, 0, 0, 6, 6, 6, 0, 6, 0, 0, 0, 6, 6, 6, 12, 6, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 6, 0, 0, 6, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 6, 6, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 6, 0, 0, 0, 5, 0, 6, 6, 6, 0, 0, 6, 0, 13, 0, 0, 6, 6, 6, 6, 12,
6, 12, 6, 6, 6, 12, 12, 12, 12, 12, 6, 0, 13, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 12,
12, 12, 12, 12, 12, 12, 6, 12, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 6, 6, 6, 6, 12, 12, 12,
12, 12, 6, 12, 12, 12, 12, 6, 6, 6, 6, 0, 0, 6, 0, 6, 0, 6, 0, 0, 6, 6, 6, 0, 6, 6, 6, 12, 12, 12, 12, 12,
12, 12, 12, 6, 12, 12, 6, 6, 6, 0, 6, 6, 6, 0, 0, 0, 0, 6, 0, 0, 6, 6, 6, 6, 6, 6, 12, 6, 12, 6, 12, 12,
12, 12, 12, 12, 6, 12, 6, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 6, 0, 0, 6, 6, 6, 6, 6, 6, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 6, 6, 12, 12, 12, 12, 12, 12, 12,
6, 12, 12, 6, 12, 6, 6, 0, 6, 6, 6, 6, 0, 6, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 6, 6, 12, 6, 12, 12, 6, 12,
6, 12, 6, 6, 12, 0, 6, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 6, 6, 0, 0, 13, 0, 0, 0, 0, 6, 6, 0, 0, 6, 0, 0, 0, 0, 7, 0, 0, 6, 6, 6, 12, 12, 12, 12,
12, 6, 12, 12, 6, 6, 0, 0, 0, 0, 6, 0, 6, 0, 0, 6, 6, 0, 0, 6, 6, 0, 0, 0, 0, 0, 12, 6, 6, 6, 6, 12,
6, 12, 12, 6, 12, 6, 6, 6, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 12, 12, 12, 12, 12, 12, 12, 12,
12, 6, 6, 6, 12, 12, 12, 6, 12, 0, 6, 6, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 6, 12, 12, 12, 12, 6,
6, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 0, 0, 6, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 6, 12, 6, 6, 12, 12, 12, 6,
12, 12, 12, 12, 6, 12, 12, 12, 12, 6, 6, 6, 0, 0, 0, 0, 0, 6, 0, 6, 6, 0, 12, 12, 6, 12, 6, 12, 12, 12, 6, 12,
12, 12, 12, 12, 12, 6, 12, 6, 12, 12, 12, 6, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 12, 6, 12, 12, 12, 6, 12, 12, 12,
6, 12, 6, 12, 12, 6, 12, 12, 6, 12, 12, 6, 6, 0, 0, 6, 0, 0, 6, 6, 6, 6, 6, 12, 12, 12, 12, 12, 12, 12, 6, 12,
12, 12, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 0, 6, 6, 6, 6, 6, 6, 12, 6, 12, 12, 12, 12, 12, 6, 12, 12,
12, 6, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 12, 6, 6, 6, 6, 6, 12, 12, 12, 6, 12, 12, 12, 12, 12, 12, 12,
6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 12, 12, 12, 12, 12, 12, 12, 6, 12, 12, 12, 12, 6,
12, 12, 12, 12, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 12, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 12, 6, 12, 12, 12, 12, 12, 6, 12, 6, 12, 12, 12, 12, 6, 12, 12, 12, 6, 6,
12, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 12, 12, 12, 12, 12, 6, 12, 6, 6,
0};

chest_t chests[] = {{4356, 2, 0, true}};
//item_t items[] = {{160, 10, 0, "UNKNOWN ITEM", 1, true}, {169, 10, 0, "UNKNOWN ITEM", 1, true}};
portal_t portals[] = {{1000, -1, -1}};
enemy_t enemies[] = {{2000, -10, -10, -1, -1}};

/*
============================================================
Quest Definitions
============================================================
*/

